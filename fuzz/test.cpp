/*
    build: path_to_custom_clang/../clang -fsanitize=fuzzer -isysroot $(xcrun
   --show-sdk-path) hello.mm -o meysam
*/

#include <dlfcn.h>
#include <fcntl.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/stat.h>
#include <time.h>
#include <unistd.h>

#define DEVICE_NAME "/dev/pishi"
#define PISHI_IOCTL_MAP _IOR('K', 8, struct pishi_buf_desc) // change to _IOR
#define PISHI_IOCTL_START _IOW('K', 10, uint16_t)
#define PISHI_IOCTL_STOP _IO('K', 20)
#define PISHI_IOCTL_UNMAP _IO('K', 30)
#define PISHI_IOCTL_TEST _IO('K', 40)
#define PISHI_IOCTL_FUZZ _IOW('K', 50, char *)

struct pishi_buf_desc {
  uintptr_t ptr; /* ptr to shared buffer [out] */
  size_t sz;     /* size of shared buffer [out] */
};

struct pishi {
  unsigned long kcov_pos;
  uintptr_t kcov_area[0];
};

int pishi_fd;
struct pishi_buf_desc mc = {0};
char _pishi_libfuzzer_coverage[32 << 10];

void pishi_start(short a) {
  if (ioctl(pishi_fd, PISHI_IOCTL_START, &a) == -1) {
    perror("Failed to perform ioctl PISHI_IOCTL_START");
    close(pishi_fd);
    exit(0);
  }
}

void pishi_collect() {
  struct pishi *coverage = (struct pishi *)mc.ptr;

  for (int i = 0; i < coverage->kcov_pos; i++) {
    uint64_t pc = coverage->kcov_area[i];
    _pishi_libfuzzer_coverage[pc % sizeof(_pishi_libfuzzer_coverage)]++;
    printf("%llx\n", pc);
  }
}

void pishi_stop() {
  uint64_t data_to_send = 12345; // Example data to send
  if (ioctl(pishi_fd, PISHI_IOCTL_STOP, &data_to_send) == -1) {
    perror("Failed to perform ioctl PISHI_IOCTL_STOP");
    exit(0);
    close(pishi_fd);
  }

  pishi_collect();
}

void pishi_init() {

  pishi_fd = open(DEVICE_NAME, O_RDWR);
  if (pishi_fd == -1) {
    perror("Failed to open device");
    exit(0);
    return;
  }
  if (ioctl(pishi_fd, PISHI_IOCTL_MAP, &mc) == -1) {
    perror("Failed to perform ioctl PISHI_IOCTL_MAP");
    exit(0);
    close(pishi_fd);
    return;
  }
}

#include "kext.h" // this file will be generated by instrument.py 

int main() {
  pishi_init();
  pishi_start(2);
  // uintptr_t** a = (uintptr_t**)&data;
  // ioctl(pishi_fd, PISHI_IOCTL_FUZZ, a);
  open(".", 0, 0);
  pishi_stop();

  return 0;
}
